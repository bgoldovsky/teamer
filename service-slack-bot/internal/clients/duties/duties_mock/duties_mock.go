// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock_duties is a generated GoMock package.
package mock_duties

import (
	context "context"
	v1 "github.com/bgoldovsky/dutyer/service-slack-bot/internal/generated/clients/v1"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// Mockclient is a mock of client interface
type Mockclient struct {
	ctrl     *gomock.Controller
	recorder *MockclientMockRecorder
}

// MockclientMockRecorder is the mock recorder for Mockclient
type MockclientMockRecorder struct {
	mock *Mockclient
}

// NewMockclient creates a new mock instance
func NewMockclient(ctrl *gomock.Controller) *Mockclient {
	mock := &Mockclient{ctrl: ctrl}
	mock.recorder = &MockclientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockclient) EXPECT() *MockclientMockRecorder {
	return m.recorder
}

// GetCurrentDuty mocks base method
func (m *Mockclient) GetCurrentDuty(ctx context.Context, in *v1.GetCurrentDutyRequest, opts ...grpc.CallOption) (*v1.GetCurrentDutyReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCurrentDuty", varargs...)
	ret0, _ := ret[0].(*v1.GetCurrentDutyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentDuty indicates an expected call of GetCurrentDuty
func (mr *MockclientMockRecorder) GetCurrentDuty(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentDuty", reflect.TypeOf((*Mockclient)(nil).GetCurrentDuty), varargs...)
}
